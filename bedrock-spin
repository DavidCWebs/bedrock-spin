#!/bin/bash
#
# composer=/usr/local/bin/composer.phar
# This script:
#
# - Downloads and installs a Bedrock project to a directory you specify
# -
#
# Notes re: MacOS
# I don't think the tr command is available on Mac - this is used by this script
# to generate passwords.
################################################################################

# Set the Project directory
THIS=$(readlink -f ${BASH_SOURCE[0]})
PROJECT_DIR=$(dirname $THIS)

# Include dependencies
. "$PROJECT_DIR/password-generation"

echo -e "Directory is $PROJECT_DIR"

RED='\033[0;31m'
YELLOW='\033[1;33m'
LB='\033[1;34m'
NC='\033[0m' # No Color

################################################################################
# Set the environment, URL, path and other important variables
#
################################################################################
function environment_and_path() {
  echo -e ${YELLOW}
  echo -e "+-------------------------------------------------------------------+"
  echo -e "| Choose an environment for this project:                           |"
  echo -e "+-------------------------------------------------------------------+"
  echo -e ${NC}

  PS3='Select the environment for this project by entering a number from the above list:'
  select SITE_ENV in development staging production Quit;
  do
    case "$SITE_ENV" in
      "development")
          #echo "$SITE_ENV selected"
          break
          ;;
      "staging")
          #echo "$SITE_ENV selected"
          break
          ;;
      "production")
          #echo "$SITE_ENV selected"
          break
          ;;
      "Quit")
          break
          ;;
      *) echo invalid option;;
    esac

  done
  echo -e "${LB}$SITE_ENV${NC} selected"

  echo -e ${YELLOW}
  echo -e "+-------------------------------------------------------------------+"
  echo -e "| Do you want to install this project as a sub-directory of         |"
  echo -e "| localhost (accessed at http://localhost/newsite/web), or as       |"
  echo -e "| a standalone domain (accessed at http://newsite.com)?             |"
  echo -e "| Selecting 'localhost' won't require adjusting '/etc/hosts'        |"
  echo -e "| for local development. For a production environment, you'll       |"
  echo -e "| need the 'standalone' option.                                     |"
  echo -e "+-------------------------------------------------------------------+"
  echo -e ${NC}

  PS3='Select domain type for this project by entering a number from the list above:'
  select DOMAIN_TYPE in localhost standalone Quit
  do
    case "$DOMAIN_TYPE" in
      "localhost")
          echo -e "${LB}$DOMAIN_TYPE${NC} selected"
          break
          ;;
      "standalone")
          echo -e "${LB}$DOMAIN_TYPE${NC} selected"
          break
          ;;
      "Quit")
          break
          ;;
      *) echo invalid option;;
    esac
  done

  if [[ $DOMAIN_TYPE == standalone ]]; then

    echo -e "Please enter the root domain for the new site."
    echo -e "+-----------------------------------------------------------------+"
    echo -e "| IMPORTANT: use the format 'example.com':                        |"
    echo -e "+-----------------------------------------------------------------+"
    read SITE_NAME

    WP_PATH=http://$SITE_NAME

  else
    # This option won't require adjusting `/etc/hosts` for local development work.
    echo -e "Please enter the root directory (a sub-directory of localhost) for the new site:"
    read SITE_NAME

    WP_PATH=http://localhost/$SITE_NAME/web

  fi

  echo "SITE_NAME is $SITE_NAME."
  echo "WP_PATH is $WP_PATH."

  WP_DIR=/var/www/html/$SITE_NAME

}

################################################################################
# Set up Bedrock using Composer.
#
# Composer needs to be in your $PATH.
################################################################################
function setup_bedrock() {

  echo -e "+-------------------------------------------------------------------+"
  echo -e "| Sudo privilege will be used to create your new project directory. |"
  echo -e "| Once created, the directory will be chown'd to your \$USER.       |"
  echo -e "| Composer will then install Bedrock.                               |"
  echo -e "+-------------------------------------------------------------------+"
  echo ""

  sudo mkdir $WP_DIR

  echo -e "Please enter the admin email address for this project:"
  read EMAIL

  # Set ownership for directory
  sudo chown -R $USER:www-data $WP_DIR

  # Create new directory and use WP-CLI to download WordPress
  composer create-project roots/bedrock $WP_DIR

  # Set directory & file permissions using an absolute path:
  find /var/www/html/$SITE_NAME -type d -exec chmod 755 {} \;
  find /var/www/html/$SITE_NAME -type f -exec chmod 644 {} \;

  cd $WP_DIR

  echo -e "+-------------------------------------------------------------------+"
  echo -e "| The new Bedrock site has been created at $WP_DIR.                 |"
  echo -e "| It is owned by \"$USER\".                                         |"
  echo -e "+-------------------------------------------------------------------+"
  echo ""

}

################################################################################
# Build new database.
#
# Username is based on the chosen database name. For shared hosting environments,
# should this be more secure? Probably not relevant in a VPS context.
################################################################################

function setup_database() {

  echo -e "+-------------------------------------------------------------------+"
  echo -e "| This script will create a local database with a new user.         |"
  echo -e "| You will be prompted to set new passwords, and you will need      |"
  echo -e "| to enter your MySQL/MariaDB root password.                        |"
  echo -e "+-------------------------------------------------------------------|"
  echo -e ""
  echo -e "Enter the name of the new database:"
  read  DB_NAME

  DB_USER=$DB_NAME
  DB_USER+=_user

  # echo -e "Enter a STRONG password for the new database:"
  # read DB_PASS
  DB_PASS=$(random_password 32 alnum)

  # For security purposes, ask for a table prefix. Default to 'wp_'
  echo -e "If required, enter a database table prefix. Leave out the underscore. Defaults to 'wp_'."
  read DB_PREFIX

  if [ "$DB_PREFIX" = "" ]; then
    DB_PREFIX=wp_

  else
    DB_PREFIX=${DB_PREFIX}_
  fi

  echo "Prefix: $DB_PREFIX"

  echo -e "Enter the MySQL/MariaDB root password:"
  read ROOT_PASSWORD

  DB_ARGS="CREATE DATABASE $DB_NAME;GRANT ALL PRIVILEGES ON $DB_NAME.* TO $DB_USER@localhost IDENTIFIED BY '$DB_PASS';FLUSH PRIVILEGES;"
  mysql -u root -p$ROOT_PASSWORD -e "$DB_ARGS"

  if [ $? != "0" ]

  then

    echo "[Error]: Database creation failed."
    exit 1

  else

    echo -e "+-----------------------------------------------------------------+"
    echo -e "| Successfully created database $DB_NAME. The database details    |"
    echo -e "| will be added to your project's .env file.                      |"
    echo -e "+-----------------------------------------------------------------+"
    echo -e ""

  fi

}

################################################################################
# Set up wp-config.php.
#
# Requires WP-CLI
################################################################################
function configure_database() {

  # Install WordPress
  #echo -e "Enter a password for WordPress.\nYour database might be exported to a publicly accessible server, so please set a strong password."
  #read WP_PASS
  WP_PASS=$(random_password)

  echo -e "Enter a username. NOT 'ADMIN'!"
  read WP_USERNAME

  wp core install --url=$WP_PATH --title="Basic Test Site" --admin_user=$WP_USERNAME --admin_password=$WP_PASS --admin_email=$EMAIL

  # Discourage search engines
  wp option update blog_public 0

  # delete sample page, and create homepage
  wp post delete $(wp post list --post_type=page --posts_per_page=1 --post_status=publish --pagename="sample-page" --field=ID --format=ids)
  wp post create --post_type=page --post_title=Home --post_status=publish --post_author=$(wp user get $WP_USERNAME --field=ID --format=ids)
  wp post create --post_type=page --post_title=About --post_status=publish --post_author=$(wp user get $WP_USERNAME --field=ID --format=ids)

  # delete readme and license
  rm license.txt
  rm readme.html

  # set homepage as front page
  wp option update show_on_front 'page'

  # set homepage to be the new page
  wp option update page_on_front $(wp post list --post_type=page --post_status=publish --posts_per_page=1 --pagename=home --field=ID --format=ids)

  # set pretty urls
  wp rewrite structure '/%postname%/' --hard
  wp rewrite flush --hard

  # delete akismet and hello dolly
  # wp plugin delete akismet
  # wp plugin delete hello

  echo "------------------------------------------"
  echo " WordPress has been installed successfully: $WP_PATH "
  echo "------------------------------------------"
  echo " DB Info: "
  echo ""
  echo " DB Name: $DB_NAME"
  echo " DB User: $DB_USER"
  echo " DB Pass: $DB_PASS"
  echo "------------------------------------------"
  echo " WordPress User details:"
  echo ""
  echo " WP username: $WP_USERNAME"
  echo " WP password: $WP_PASS"

}

################################################################################
# Generate a .env file in the project root and populate the file with values.
#
# ##############################################################################
create_config() {

  touch $WP_DIR/.env

  read -r -d '' CONFIG_ARGS << EOF
DB_NAME=$DB_NAME
DB_USER=$DB_USER
DB_PASSWORD=$DB_PASS
DB_HOST=localhost
DB_PREFIX=$DB_PREFIX

WP_ENV=$SITE_ENV
WP_HOME=$WP_PATH
WP_SITEURL=$WP_PATH/wp

EOF

  SALTS=$(generate_salts)

  COMBINED_CONFIG=${CONFIG_ARGS}$'\n'${SALTS}

  printf "%s" "$COMBINED_CONFIG" > $WP_DIR/.env

  cd $WP_DIR

}

################################################################################
# Setup Sage starter theme.
#
################################################################################
setup_theme() {

  echo -e "Choose a name for the new theme:"
  read THEMENAME

  # TODO: Check Paths!!
  # ----------------------------------------------------------------------------
  composer create-project roots/sage $WP_DIR/web/app/themes/$THEMENAME 9.0.0-alpha.1
  # ----------------------------------------------------------------------------
  cd $WP_DIR/web/app/themes/$THEMENAME
  replace "bedrock" "$THEMENAME" -- assets/config.json

  printf "Run NPM Install:\n"
  npm install

  printf "Run NPM Build:\n"
  npm run build

  printf "Activate Sage:\n"
  wp theme activate $THEMENAME

  read -p "Set up a new GitHub repo for $THEMENAME? [y/N]" yn
  case $yn in
    [Yy]* ) setup_repo;;
    [Nn]* ) ;;
    * ) echo "Please answer yes or no.";;
  esac

  read -p "Do you want to open this project in Atom? [y/N]" yn
  case $yn in
    [Yy]* ) atom .;;
    [Nn]* ) exit ;;
    * ) echo "Please answer yes or no.";;
  esac

}

################################################################################
# Set up a GitHub Repo
#
################################################################################
function setup_repo () {

  cd $WP_DIR/web/app/themes/$THEMENAME

  # remove existing git repo
  sudo rm -rf $WP_DIR/wp-content/themes/$THEMENAME/.git
  git init
  repo_name=$1
  dir_name=`basename $(pwd)`
  invalid_credentials=0

  if [ "$repo_name" = "" ]; then
    echo "  Repo name (hit enter to use '$dir_name')?"
    read repo_name
  fi

  if [ "$repo_name" = "" ]; then
    repo_name=$dir_name
  fi

  GIT_USERNAME=`git config github.user`
  if [ "$GIT_USERNAME" = "" ]; then
    echo "  Could not find Git username, run 'git config --global github.user <username>'"
    invalid_credentials=1
  fi

  token=`git config github.token`
  if [ "$token" = "" ]; then
    echo "  Could not find token, run 'git config --global github.token <token>'"
    invalid_credentials=1
  fi

  if [ "$invalid_credentials" -eq "1" ]; then
    return 1
  fi

  echo -n "  Creating Github repository '$repo_name' ..."
  curl -u "$GIT_USERNAME:$token" https://api.github.com/user/repos -d '{"name":"'$repo_name'"}' > /dev/null 2>&1
  echo " done."

  echo -n "  Pushing local code to remote ..."
  git remote add origin git@github.com:$GIT_USERNAME/$repo_name.git > /dev/null 2>&1
  git push -u origin master > /dev/null 2>&1
  git add -A
  git commit -m "First Commit"
  git push origin master
  echo " done."

}

################################################################################
# Configure and enable an Apache vhost directive
#
################################################################################
apache_vhost() {

  VHOST_NAME=$SITE_NAME.conf
  CONFIG=/etc/apache2/sites-available/$VHOST_NAME

  echo -e "+--------------------------------------------------------------------+"
  echo -e "| You have chosen to set up an Apache vhosts directive.              |"             |
  echo -e "| This will involve creating and activating an Apache config file:   |"
  echo -e "| /etc/apache2/sites-available/$SITE_NAME.conf.                      |"
  echo -e "| This will require sudo privileges.                                 |"
  echo -e "| For the moment this sets up a vhost for port 80(http protocol).    |"
  echo -e "+--------------------------------------------------------------------+"

  sudo touch $CONFIG

  read -r -d '' VHOST_DIRECTIVES << EOF
<VirtualHost *:80>
        ServerName $SITE_NAME
        ServerAlias www.$SITE_NAME
        ServerAdmin info@example.com
        DocumentRoot /var/www/html/$SITE_NAME/web
        <Directory /var/www/html/$SITE_NAME/web>
                Options -Indexes +FollowSymLinks
                AllowOverride All
                Require all granted
        </Directory>
        ErrorLog \${APACHE_LOG_DIR}/$SITE_NAME.error.log
        CustomLog \${APACHE_LOG_DIR}/$SITE_NAME.access.log combined
</VirtualHost>

EOF

  # See http://unix.stackexchange.com/a/19708
  printf "%s" "$VHOST_DIRECTIVES" | sudo tee $CONFIG

  # enable newly created virtualhost
  echo "Running a2ensite..."
  sudo a2ensite $VHOST_NAME

  echo "Restarting Apache..."
  sudo /etc/init.d/apache2 restart

}

function install_soil() {

  composer require roots/soil 3.7.1

  wp plugin activate soil

}

function options() {

  read -p "Do you want to install and activate the Roots \"Soil\" plugin? [y/N]" yn
  case $yn in
    [Yy]* ) install_soil;;
    [Nn]* ) exit ;;
    * ) echo "Please answer yes or no.";;
  esac

  read -p "Do you want to set up and install an Apache virtual hosts directive? [y/N]" yn
  case $yn in
    [Yy]* ) apache_vhost;;
    [Nn]* ) exit ;;
    * ) echo "Please answer yes or no.";;
  esac

  read -p "Do you want to set up the Sage Starter theme? [y/N]" yn
  case $yn in
    [Yy]* ) setup_theme;;
    [Nn]* ) exit ;;
    * ) echo "Please answer yes or no.";;
  esac

}

function generate_salts() {

  IFS=; read -r -d '' SALTS << EOF

AUTH_KEY=$(random_salt)
SECURE_AUTH_KEY=$(random_salt)
LOGGED_IN_KEY=$(random_salt)
NONCE_KEY=$(random_salt)
AUTH_SALT=$(random_salt)
SECURE_AUTH_SALT=$(random_salt)
LOGGED_IN_SALT=$(random_salt)
NONCE_SALT=$(random_salt)
EOF

  echo $SALTS

}


################################################################################
# All set? Let's go!
#
# Trigger the functions in this script in the correct order.
################################################################################
# setup_bedrock
# setup_database
# create_config
# configure_database
# options
environment_and_path
